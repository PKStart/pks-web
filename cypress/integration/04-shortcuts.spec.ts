import { shortcutsPo as po } from '../support/page-objects/shortcuts.po'
import { confirmationDialogPo } from '../support/page-objects/confirmation-dialog.po'

describe('Shortcuts', () => {
  beforeEach(() => {
    cy.login()
  })

  it('Should have the initial shortcuts and the menu should work', () => {
    po.menu().should('be.visible')
    po.menuButtons().should('have.length', 5)
    po.backdrop().should('not.exist')
    po.menuButton(0).click()
    po.backdrop().should('be.visible')
    po.shortcuts().should('be.visible').should('have.length', 2)
    po.shortcut(0).should('contain', 'Revolut')
    po.shortcut(1).should('contain', 'Wolt')
    po.backdrop().click()
    po.shortcuts().should('not.exist')
    po.menuButton(1).click()
    po.backdrop().should('be.visible')
    po.shortcuts().should('be.visible').should('have.length', 2)
    po.shortcut(0).should('contain', 'StackOverflow')
    po.shortcut(1).should('contain', 'Dev.to')
    po.menuButton(2).click()
    po.shortcuts().should('be.visible').should('have.length', 3)
    po.shortcut(0).should('contain', 'Cloud Console')
    po.shortcut(1).should('contain', 'Docs')
    po.shortcut(2).should('contain', 'Keep')
    po.menuButton(3).click()
    po.shortcuts().should('have.length', 2)
    po.shortcut(0).should('contain', 'Netflix')
    po.shortcut(1).should('contain', 'Facebook')
    po.menuButton(4).click()
    po.shortcuts().should('have.length', 2)
    po.shortcut(0).should('contain', 'Flickr')
    po.shortcut(1).should('contain', 'YahooMail')
    po.backdrop().click()
    po.backdrop().should('not.exist')
    po.shortcuts().should('not.exist')
  })

  it('Should be possible to edit a shortcut', () => {
    po.menuButton(0).click()
    po.shortcut(0).rightclick()
    po.shortcutContextMenu().should('be.visible')
    po.shortcutContextMenuButtons().should('have.length', 2)
    po.editShortcutBtn().click()
    po.shortcutDialog.dialog().should('be.visible')
    po.shortcutDialog.title().should('contain', 'Edit Revolut')
    po.shortcutDialog.closeBtn().click()
    po.shortcutDialog.dialog().should('not.exist')
    po.shortcut(0).rightclick()
    po.shortcutContextMenu().should('be.visible')
    po.editShortcutBtn().click()
    po.shortcutDialog.nameInput().clear().type('Updated')
    po.shortcutDialog.saveBtn().should('not.be.disabled').click().wait(500)
    po.shortcut(0).should('contain', 'Updated').should('not.contain', 'Revolut').rightclick()
    po.editShortcutBtn().click()
    po.shortcutDialog.title().should('contain', 'Edit Updated')
    po.shortcutDialog.nameInput().clear().type('Revolut')
    po.shortcutDialog.saveBtn().should('not.be.disabled').click().wait(500)
    po.shortcut(0).should('contain', 'Revolut')
  })

  it('Should be possible to add a new shortcut', () => {
    po.menu().rightclick()
    po.addContextMenu().should('be.visible')
    po.addShortcutBtn().should('be.visible').click()
    po.shortcutDialog.dialog().should('be.visible')
    po.shortcutDialog.title().should('contain', 'Add new shortcut')
    po.shortcutDialog.nameInput().type('New shortcut')
    po.shortcutDialog.urlInput().type('https://www.p-kin.com')
    po.shortcutDialog.iconUrlInput().type('gmaps.png')
    po.shortcutDialog.categoryInput().click()
    cy.get('mat-option').contains('TOP').click()
    po.shortcutDialog.saveBtn().should('not.be.disabled').click().wait(500)
    po.menuButton(0).click()
    po.shortcuts().should('have.length', 3)
    po.shortcut(1).should('contain', 'New shortcut')
  })

  it('Should be possible to delete a shortcut', () => {
    po.menuButton(0).click()
    po.shortcut(1).rightclick()
    po.deleteShortcutBtn().click()
    confirmationDialogPo
      .dialog()
      .should('be.visible')
      .should('contain', 'Do you really want to delete the shortcut of New shortcut?')
    confirmationDialogPo.okBtn().click().wait(500)
    po.backdrop().click()
    po.menuButton(0).click()
    po.shortcuts().should('have.length', 2)
    po.shortcut(0).should('contain', 'Revolut')
    po.shortcut(1).should('contain', 'Wolt')
  })
})
